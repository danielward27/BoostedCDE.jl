var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = BoostedCDE","category":"page"},{"location":"#BoostedCDE","page":"Home","title":"BoostedCDE","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for BoostedCDE.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [BoostedCDE]","category":"page"},{"location":"#BoostedCDE.BaseLearner","page":"Home","title":"BoostedCDE.BaseLearner","text":"Base learners are used to predict the negative gradient vector. These must all have the methods fit! and predict.\n\n\n\n\n\n","category":"type"},{"location":"#BoostedCDE.BoostingModel","page":"Home","title":"BoostedCDE.BoostingModel","text":"Constructs a BoostingModel that can be trained using [boost]@ref\n\n\n\n\n\n","category":"type"},{"location":"#BoostedCDE.ConstBaseLearner","page":"Home","title":"BoostedCDE.ConstBaseLearner","text":"Base learner used at initialization to predict a constant value. Additional arguments can be provided to fit! for consistency with other base learners but these are ignored.\n\n\n\n\n\n","category":"type"},{"location":"#BoostedCDE.gaussian_simulator-Tuple{Random.AbstractRNG, AbstractVector{Float64}}","page":"Home","title":"BoostedCDE.gaussian_simulator","text":"Simulate a three dimensional Gaussian mean vector θ. The covariance is diagonal, and fixed to σ=0.1. Parameter vector θ is the mean vector of the Gaussian.\n\n\n\n\n\n","category":"method"},{"location":"#BoostedCDE.mvn_loss-Tuple{AbstractMatrix{var\"#s27\"} where var\"#s27\"<:Real, AbstractMatrix{Float64}}","page":"Home","title":"BoostedCDE.mvn_loss","text":"Negative log-probability of x using vector of parameters ϕ to parameterise the means and cholesky decomposition of the normal distribution.\n\n\n\n\n\n","category":"method"},{"location":"#BoostedCDE.predict-Tuple{BoostingModel, AbstractMatrix{Float64}, AbstractMatrix{Float64}}","page":"Home","title":"BoostedCDE.predict","text":"Predict using the boosting model to get a vector of distributional parameters. Computes using no cached results (e.g. from previous iterations during training).\n\n\n\n\n\n","category":"method"},{"location":"#BoostedCDE.triangular_to_vec-Union{Tuple{LinearAlgebra.UpperTriangular{T, S} where S<:AbstractMatrix{T}}, Tuple{T}} where T","page":"Home","title":"BoostedCDE.triangular_to_vec","text":"Convert triangular matrix to vector. This uses the convention that the upper triangular elements are listed columnwise (or equivilently, lower triangular elements listed rowwise).\n\n\n\n\n\n","category":"method"},{"location":"#BoostedCDE.vec_to_triangular-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"Home","title":"BoostedCDE.vec_to_triangular","text":"Constructs an upper triangular matrix from a vector. Vector should correspond to the upper triangular elements listed columnwise.\n\n\n\n\n\n","category":"method"},{"location":"#BoostedCDE.μ_chol_splitter-Tuple{AbstractVector{var\"#s1\"} where var\"#s1\"<:Real}","page":"Home","title":"BoostedCDE.μ_chol_splitter","text":"Take a flattened mean and traingular matrix and reconstruct it returning a tuple\n\n\n\n\n\n","category":"method"},{"location":"#BoostedCDE.@loopify-Tuple{Any, Any}","page":"Home","title":"BoostedCDE.@loopify","text":"Convenience macro to define a method for a simulator that allows simulating in     batches. i.e. it takes simulator(rng::AbstractRNG, θ::AbstractVector{Float64}) and     wraps it in a for loop to get simulator(rng::AbstractRNG,     θ::Matrix{Float64}).\n\n\n\n\n\n","category":"macro"}]
}
